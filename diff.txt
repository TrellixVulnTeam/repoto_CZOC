--- kati.ori/eval.cc	2020-08-29 16:23:40.723645004 +0200
+++ kati/eval.cc	2019-12-26 18:49:40.222554259 +0100
@@ -19,6 +19,8 @@
 #include <errno.h>
 #include <pthread.h>
 #include <string.h>
+#include <sstream>
+#include <map>
 
 #include "expr.h"
 #include "file.h"
@@ -31,8 +33,124 @@
 #include "symtab.h"
 #include "var.h"
 
+
+const char *_product_var_list[] = {
+    "PRODUCT_NAME",
+    "PRODUCT_MODEL",
+    "PRODUCT_LOCALES",
+    "PRODUCT_AAPT_CONFIG",
+    "PRODUCT_AAPT_PREF_CONFIG",
+    "PRODUCT_AAPT_PREBUILT_DPI",
+    "PRODUCT_PACKAGES",
+    /*
+    "PRODUCT_PACKAGES_DEBUG",
+    "PRODUCT_PACKAGES_ENG",
+    "PRODUCT_PACKAGES_TESTS",
+    "PRODUCT_DEVICE",
+    "PRODUCT_MANUFACTURER",
+    "PRODUCT_BRAND",
+    "PRODUCT_PROPERTY_OVERRIDES",
+    "PRODUCT_DEFAULT_PROPERTY_OVERRIDES",
+    "PRODUCT_PRODUCT_PROPERTIES",
+    "PRODUCT_CHARACTERISTICS",
+    "PRODUCT_COPY_FILES",
+    "PRODUCT_OTA_PUBLIC_KEYS",
+    "PRODUCT_EXTRA_RECOVERY_KEYS",
+    "PRODUCT_PACKAGE_OVERLAYS",
+    "DEVICE_PACKAGE_OVERLAYS",
+    "PRODUCT_ENFORCE_RRO_EXCLUDED_OVERLAYS",
+    "PRODUCT_ENFORCE_RRO_TARGETS",
+    "PRODUCT_SDK_ATREE_FILES",
+    "PRODUCT_SDK_ADDON_NAME",
+    "PRODUCT_SDK_ADDON_COPY_FILES",
+    "PRODUCT_SDK_ADDON_COPY_MODULES",
+    "PRODUCT_SDK_ADDON_DOC_MODULES",
+    "PRODUCT_SDK_ADDON_SYS_IMG_SOURCE_PROP",
+    "PRODUCT_SOONG_NAMESPACES",
+    "PRODUCT_DEFAULT_WIFI_CHANNELS",
+    "PRODUCT_DEFAULT_DEV_CERTIFICATE",
+    "PRODUCT_RESTRICT_VENDOR_FILES",
+    "PRODUCT_VENDOR_KERNEL_HEADERS",
+    "PRODUCT_BOOT_JARS",
+    "PRODUCT_SUPPORTS_BOOT_SIGNER",
+    "PRODUCT_SUPPORTS_VBOOT",
+    "PRODUCT_SUPPORTS_VERITY",
+    "PRODUCT_SUPPORTS_VERITY_FEC",
+    "PRODUCT_OEM_PROPERTIES",
+    "PRODUCT_SYSTEM_DEFAULT_PROPERTIES",
+    "PRODUCT_SYSTEM_PROPERTY_BLACKLIST",
+    "PRODUCT_VENDOR_PROPERTY_BLACKLIST",
+    "PRODUCT_SYSTEM_SERVER_APPS",
+    "PRODUCT_SYSTEM_SERVER_JARS",
+    "PRODUCT_ALWAYS_PREOPT_EXTRACTED_APK",
+    "PRODUCT_DEXPREOPT_SPEED_APPS",
+    "PRODUCT_LOADED_BY_PRIVILEGED_MODULES",
+    "PRODUCT_VBOOT_SIGNING_KEY",
+    "PRODUCT_VBOOT_SIGNING_SUBKEY",
+    "PRODUCT_VERITY_SIGNING_KEY",
+    "PRODUCT_SYSTEM_VERITY_PARTITION",
+    "PRODUCT_VENDOR_VERITY_PARTITION",
+    "PRODUCT_PRODUCT_VERITY_PARTITION",
+    "PRODUCT_SYSTEM_SERVER_DEBUG_INFO",
+    "PRODUCT_OTHER_JAVA_DEBUG_INFO",
+    "PRODUCT_DEX_PREOPT_MODULE_CONFIGS",
+    "PRODUCT_DEX_PREOPT_DEFAULT_COMPILER_FILTER",
+    "PRODUCT_DEX_PREOPT_DEFAULT_FLAGS",
+    "PRODUCT_DEX_PREOPT_BOOT_FLAGS",
+    "PRODUCT_DEX_PREOPT_PROFILE_DIR",
+    "PRODUCT_DEX_PREOPT_BOOT_IMAGE_PROFILE_LOCATION",
+    "PRODUCT_DEX_PREOPT_GENERATE_DM_FILES",
+    "PRODUCT_USE_PROFILE_FOR_BOOT_IMAGE",
+    "PRODUCT_SYSTEM_SERVER_COMPILER_FILTER",
+    "PRODUCT_SANITIZER_MODULE_CONFIGS",
+    "PRODUCT_SYSTEM_BASE_FS_PATH",
+    "PRODUCT_VENDOR_BASE_FS_PATH",
+    "PRODUCT_PRODUCT_BASE_FS_PATH",
+    "PRODUCT_SHIPPING_API_LEVEL",
+    "VENDOR_PRODUCT_RESTRICT_VENDOR_FILES",
+    "VENDOR_EXCEPTION_MODULES",
+    "VENDOR_EXCEPTION_PATHS",
+    "PRODUCT_ART_TARGET_INCLUDE_DEBUG_BUILD",
+    "PRODUCT_ART_USE_READ_BARRIER",
+    "PRODUCT_IOT",
+    "PRODUCT_SYSTEM_HEADROOM",
+    "PRODUCT_MINIMIZE_JAVA_DEBUG_INFO",
+    "PRODUCT_INTEGER_OVERFLOW_EXCLUDE_PATHS",
+    "PRODUCT_ADB_KEYS",
+    "PRODUCT_CFI_INCLUDE_PATHS",
+    "PRODUCT_CFI_EXCLUDE_PATHS",
+    "PRODUCT_COMPATIBLE_PROPERTY_OVERRIDE",
+    "PRODUCT_ACTIONABLE_COMPATIBLE_PROPERTY_DISABLE", */
+    "ALL_DEPS",
+    "LOCAL_PATH",
+    NULL };
+
+map<string,int> product_var_list;
+
+void init_product_var_list(void) {
+    const char **p = _product_var_list;
+    const char *p_;
+    while ((p_ = *p++)) {
+	product_var_list[string(p_)] = 1;
+    }
+}
+
+bool isprojectvar(Symbol *sym)
+{
+    const char *needle = sym->c_str();
+    const char **p = _product_var_list;
+    const char *p_;
+    while ((p_ = *p++)) {
+	if (strstr(needle,p_))
+	    return true;
+    }
+    return false;
+}
+
+
+
 Evaluator::Evaluator()
-    : last_rule_(NULL),
+    : mapidx(1), ctxidx(1), ctx(0), last_rule_(NULL),
       current_scope_(NULL),
       avoid_io_(false),
       eval_depth_(0),
@@ -119,6 +237,8 @@
     }
   }
 
+
+
   LOG("Assign: %s=%s", lhs.c_str(), result->DebugString().c_str());
   return result;
 }
@@ -143,6 +263,9 @@
     }
     return;
   }
+  if (stmt->markDefine) {
+      LOGL("LOAD-file-define: %s : %s : ", lhs.c_str(), stmt->loc().as_string().c_str());
+  }
 
   bool needs_assign;
   Var* var = EvalRHS(lhs, stmt->rhs, stmt->orig_rhs, stmt->op,
@@ -156,6 +279,22 @@
       Error(StringPrintf("*** cannot assign to readonly variable: %s",
                          lhs.c_str()));
     }
+
+  }
+  if (isprojectvar(&lhs))
+  {
+      int ctx = 0;
+      {
+	  stringstream str;
+	  str << lhs.c_str() << ":=" << var->DebugString().c_str();
+	  ctx = registerCtx(str.str());
+      }
+
+      PushEvalStack(stmt->loc(), ctx);
+
+      LOGL("LOAD-file-proj-assign: %s=<{%s}> : %s", lhs.c_str(), stackDump().c_str(), var->DebugString().c_str());
+
+      PopEvalStack();
   }
 
   if (stmt->is_final) {
@@ -401,9 +540,11 @@
   }
 }
 
-void Evaluator::DoInclude(const string& fname) {
+void Evaluator::DoInclude(const string& fname, const IncludeStmt* stmt) {
   CheckStack();
 
+  LOGL("LOAD-file-dep: %s -> %s", stmt->loc().as_string().c_str(), fname.c_str());
+
   Makefile* mk = MakefileCacheManager::Get()->ReadMakefile(fname);
   if (!mk->Exists()) {
     Error(StringPrintf("%s does not exist", fname.c_str()));
@@ -421,6 +562,23 @@
   loc_ = stmt->loc();
   last_rule_ = NULL;
 
+  int ctx = 0;
+  {
+      stringstream str;
+      str << "include ";
+      const string&& pats = stmt->expr->Eval(this);
+      for (StringPiece pat : WordScanner(pats)) {
+	  ScopedTerminator st(pat);
+	  vector<string>* files;
+	  Glob(pat.data(), &files);
+	  for (const string& fname : *files) {
+	      str << fname << " ";
+	  }
+      }
+      ctx = registerCtx(str.str());
+  }
+  PushEvalStack(stmt->loc(), ctx);
+
   const string&& pats = stmt->expr->Eval(this);
   for (StringPiece pat : WordScanner(pats)) {
     ScopedTerminator st(pat);
@@ -439,9 +597,12 @@
           Pattern(g_flags.ignore_optional_include_pattern).Match(fname)) {
         continue;
       }
-      DoInclude(fname);
+      DoInclude(fname, stmt);
     }
   }
+
+  PopEvalStack();
+
 }
 
 void Evaluator::EvalExport(const ExportStmt* stmt) {
@@ -548,6 +709,48 @@
   ERROR_LOC(loc_, "%s", msg.c_str());
 }
 
+void Evaluator::dumpmapelements(void) {
+  for(auto &i: mapfn) {
+      LOGL("LOAD-file-map-entry: %s=%d", i.first.c_str(), i.second);
+  }
+}
+
+string Evaluator::stackDump()
+{
+    stringstream str; int idx = 0;
+    for (auto &i: evalstack) {
+	string fn(i.l.filename);
+	if (mapfn.find(fn) == mapfn.end()) {
+	    idx = ++mapidx;
+	    mapfn[fn] = idx;
+	    LOGL("LOAD-file-map-entry: %s=%d", fn.c_str(), idx);
+	} else {
+	    idx = mapfn[fn];
+	}
+	str << idx << ":" << i.l.lineno << ":" << i.ctx << " ";
+    }
+    return str.str();
+}
+
+int Evaluator::registerCtxIdGet(void)
+{
+    int idx = ctxidx++;
+    return idx;
+}
+
+int Evaluator::registerCtx(string str)
+{
+    int idx = registerCtxIdGet();
+    return registerCtx_(str, idx);
+}
+
+int Evaluator::registerCtx_(string str, int idx)
+{
+    mapctx[idx] = str;
+    LOGL("LOAD-file-map-ctx: %d=%s",  idx, str.c_str());
+    return idx;
+}
+
 void Evaluator::DumpStackStats() const {
   LOG_STAT("Max stack use: %zd bytes at %s:%d",
            ((char*)stack_addr_ - (char*)lowest_stack_) + stack_size_,
--- kati.ori/expr.cc	2020-08-29 16:23:40.727644876 +0200
+++ kati/expr.cc	2019-12-26 18:49:40.222554259 +0100
@@ -17,6 +17,8 @@
 #include "expr.h"
 
 #include <vector>
+#include <string>
+#include <map>
 
 #include "eval.h"
 #include "func.h"
@@ -25,6 +27,7 @@
 #include "strutil.h"
 #include "var.h"
 
+
 Evaluable::Evaluable() {}
 
 Evaluable::~Evaluable() {}
@@ -101,6 +104,8 @@
     }
   }
 
+  virtual string substOneLevel(Evaluator*ev) const;
+
   virtual string DebugString_() const override {
     string r;
     for (Value* v : vals_) {
@@ -145,6 +150,8 @@
   explicit VarRef(Value* n) : name_(n) {}
   virtual ~VarRef() { delete name_; }
 
+  virtual bool isVarRef() const { return true; };
+
   virtual void Eval(Evaluator* ev, string* s) const override {
     ev->CheckStack();
     ev->IncrementEvalDepth();
@@ -164,6 +171,21 @@
   Value* name_;
 };
 
+string ValueList::substOneLevel(Evaluator*ev) const {
+    return "ValueList";
+    stringstream str; (void) ev;
+    str << "vals len:" << vals_.size();
+    for (Value* v : vals_) {
+	if (v->isVarRef()) {
+	    VarRef *r = dynamic_cast<VarRef*>(v);
+	    str << Value::DebugString(v) << " ";
+	} else {
+	    str << Value::DebugString(v) << " ";
+	}
+    }
+    return str.str();
+};
+
 class VarSubst : public Value {
  public:
   explicit VarSubst(Value* n, Value* p, Value* s)
@@ -207,7 +229,8 @@
 
 class Func : public Value {
  public:
-  explicit Func(FuncInfo* fi) : fi_(fi) {}
+    explicit Func(FuncInfo* fi, const Loc &loc) : loc_(loc), fi_(fi) {
+    }
 
   ~Func() {
     for (Value* a : args_)
@@ -215,9 +238,13 @@
   }
 
   virtual void Eval(Evaluator* ev, string* s) const override {
+    stringstream str;
     ev->CheckStack();
     LOG("Invoke func %s(%s)", name(), JoinValues(args_, ",").c_str());
     ev->IncrementEvalDepth();
+    str << name() << ( JoinValues(args_, ","));
+    ev->set_caller(str.str()); /* log caller */
+    ev->set_loc(loc_);
     fi_->func(args_, ev, s);
     ev->DecrementEvalDepth();
   }
@@ -235,6 +262,7 @@
   bool trim_space() const { return fi_->trim_space; }
   bool trim_right_space_1st() const { return fi_->trim_right_space_1st; }
 
+    Loc loc_;
  private:
   FuncInfo* fi_;
   vector<Value*> args_;
@@ -399,7 +427,7 @@
         Literal* lit = static_cast<Literal*>(vname);
         if (FuncInfo* fi = GetFuncInfo(lit->val())) {
           delete lit;
-          Func* func = new Func(fi);
+          Func* func = new Func(fi, loc);
           ParseFunc(loc, func, s, i + 1, terms, index_out);
           return func;
         } else {
--- kati.ori/flags.cc	2020-08-29 16:23:40.727644876 +0200
+++ kati/flags.cc	2019-12-26 18:49:40.222554259 +0100
@@ -82,8 +82,6 @@
       enable_kati_warnings = true;
     } else if (!strcmp(arg, "--ninja")) {
       generate_ninja = true;
-    } else if (!strcmp(arg, "--empty_ninja_file")) {
-      generate_empty_ninja = true;
     } else if (!strcmp(arg, "--gen_all_targets")) {
       gen_all_targets = true;
     } else if (!strcmp(arg, "--regen")) {
--- kati.ori/func.cc	2020-08-29 16:23:40.727644876 +0200
+++ kati/func.cc	2019-12-26 18:49:40.222554259 +0100
@@ -599,6 +599,8 @@
       Intern("0"), Intern("1"), Intern("2"), Intern("3"), Intern("4"),
       Intern("5"), Intern("6"), Intern("7"), Intern("8"), Intern("9")};
 
+  string caller_ = ev->caller_;
+  Loc callerloc = ev->loc();
   ev->CheckStack();
   const string&& func_name_buf = args[0]->Eval(ev);
   Symbol func_sym = Intern(TrimSpace(func_name_buf));
@@ -639,9 +641,27 @@
     }
   }
 
+
+
+  int ctx = ev->registerCtxIdGet();
+  ev->PushEvalStack(callerloc, ctx);
+
   ev->DecrementEvalDepth();
   func->Eval(ev, s);
+
+  {
+      stringstream str;
+      //str << "call: '" << caller_ << "::" <<  func->DebugString() /*substOneLevel(ev)*/ << "':"; //substOneLevel(ev);
+      //str << s->c_str();
+      ctx = ev->registerCtx_(str.str(), ctx);
+  }
+
+
+
+
   ev->IncrementEvalDepth();
+
+  ev->PopEvalStack();
 }
 
 void ForeachFunc(const vector<Value*>& args, Evaluator* ev, string* s) {
--- kati.ori/main.cc	2020-08-29 16:21:47.271231245 +0200
+++ kati/main.cc	2019-12-26 18:49:40.222554259 +0100
@@ -55,6 +55,7 @@
   InitFuncTable();
   InitDepNodePool();
   InitParser();
+  init_product_var_list();
 }
 
 static void Quit() {
@@ -315,6 +316,7 @@
   }
 
   ev->DumpStackStats();
+  ev->dumpmapelements();
 
   for (Stmt* stmt : bootstrap_asts)
     delete stmt;
@@ -350,6 +352,9 @@
     HandleRealpath(argc - 2, argv + 2);
     return 0;
   }
+
+  LOGL("LOAD-file-start");
+
   Init();
   string orig_args;
   for (int i = 0; i < argc; i++) {
--- kati.ori/ninja.cc	2020-08-29 16:21:47.271231245 +0200
+++ kati/ninja.cc	2019-12-26 18:49:40.222554259 +0100
@@ -629,10 +629,8 @@
     }
     tp->Wait();
 
-    if (!g_flags.generate_empty_ninja) {
-      for (const ostringstream& buf : bufs) {
-        fprintf(fp_, "%s", buf.str().c_str());
-      }
+    for (const ostringstream& buf : bufs) {
+      fprintf(fp_, "%s", buf.str().c_str());
     }
 
     SymbolSet used_env_vars(Vars::used_env_vars());
@@ -654,10 +652,8 @@
         default_targets += EscapeBuildTarget(s);
       }
     }
-    if (!g_flags.generate_empty_ninja) {
-      fprintf(fp_, "\n");
-      fprintf(fp_, "default %s\n", default_targets.c_str());
-    }
+    fprintf(fp_, "\n");
+    fprintf(fp_, "default %s\n", default_targets.c_str());
 
     fclose(fp_);
   }
--- kati.ori/parser.cc	2020-08-29 16:23:40.731644746 +0200
+++ kati/parser.cc	2019-12-26 18:49:40.222554259 +0100
@@ -17,6 +17,7 @@
 #include "parser.h"
 
 #include <stack>
+#include <sstream>
 #include <unordered_map>
 
 #include "expr.h"
@@ -54,7 +55,9 @@
         num_define_nest_(0),
         num_if_nest_(0),
         loc_(filename, 0),
-        fixed_lineno_(false) {}
+        fixed_lineno_(false) {
+      LOGL("LOAD-file: %s : <{%s}>", filename, buf.as_string().c_str());
+  }
 
   Parser(StringPiece buf, const Loc& loc, vector<Stmt*>* stmts)
       : buf_(buf),
@@ -63,7 +66,9 @@
         out_stmts_(stmts),
         num_if_nest_(0),
         loc_(loc),
-        fixed_lineno_(true) {}
+        fixed_lineno_(true) {
+      LOG("EVAL-snippet: %s : %s", loc.as_string().c_str(), buf.as_string().c_str());
+  }
 
   ~Parser() {}
 
@@ -276,6 +281,7 @@
     stmt->rhs = ParseExpr(rhs);
     stmt->orig_rhs = rhs;
     stmt->op = op;
+    stmt->markDefine = false;
     stmt->directive = current_directive_;
     stmt->is_final = is_final;
     out_stmts_->push_back(stmt);
@@ -301,6 +307,7 @@
     define_start_ = 0;
     define_start_line_ = loc_.lineno;
     state_ = ParserState::NOT_AFTER_RULE;
+
   }
 
   void ParseInsideDefine(StringPiece line) {
@@ -325,12 +332,26 @@
     AssignStmt* stmt = new AssignStmt();
     stmt->set_loc(Loc(loc_.filename, define_start_line_));
     stmt->lhs = ParseExpr(define_name_);
+    /*
+    {
+	stringstream s; int c;
+	const char *p = define_name_.data();
+	while ((c = *p++)) {
+	    if (isspace(c))
+		break;
+	    s<<(char)c;
+	}
+	LOGL("LOAD-file-define: %s : %s : ", s.str().c_str(), loc_.as_string().c_str(), define_name_.data());
+    }
+    */
+
     StringPiece rhs;
     if (define_start_)
       rhs = buf_.substr(define_start_, l_ - define_start_ - 1);
     stmt->rhs = ParseExpr(rhs, ParseExprOpt::DEFINE);
     stmt->orig_rhs = rhs;
     stmt->op = AssignOp::EQ;
+    stmt->markDefine = true;
     stmt->directive = current_directive_;
     out_stmts_->push_back(stmt);
     define_name_.clear();
--- kati.ori/regen.cc	2020-08-29 16:21:47.271231245 +0200
+++ kati/regen.cc	2019-12-26 18:49:40.222554259 +0100
@@ -23,7 +23,6 @@
 #include <mutex>
 #include <vector>
 
-#include "affinity.h"
 #include "fileutil.h"
 #include "find.h"
 #include "func.h"
@@ -430,7 +429,6 @@
     tp->Submit([this]() {
       string err;
       // TODO: Make glob cache thread safe and create a task for each glob.
-      SetAffinityForSingleThread();
       for (GlobResult* gr : globs_) {
         if (CheckGlobResult(gr, &err)) {
           unique_lock<mutex> lock(mu_);
@@ -444,7 +442,6 @@
     });
 
     tp->Submit([this]() {
-      SetAffinityForSingleThread();
       for (ShellResult* sr : commands_) {
         string err;
         if (CheckShellResult(sr, &err)) {
--- kati.ori/eval.h	2020-08-30 20:25:21.581042913 +0200
+++ kati/eval.h	2020-08-29 13:29:35.013395190 +0200
@@ -19,6 +19,8 @@
 #include <unordered_map>
 #include <unordered_set>
 #include <vector>
+#include <map>
+#include <string>
 
 #include "loc.h"
 #include "stmt.h"
@@ -55,6 +57,7 @@
 
   const Loc& loc() const { return loc_; }
   void set_loc(const Loc& loc) { loc_ = loc; }
+  void set_caller(string callerstr) { caller_ = callerstr; }
 
   const vector<const Rule*>& rules() const { return rules_; }
   const unordered_map<Symbol, Vars*>& rule_vars() const { return rule_vars_; }
@@ -82,6 +85,9 @@
     return used_undefined_vars_;
   }
 
+  string stackDump(void);
+  void dumpmapelements(void);
+
   int eval_depth() const { return eval_depth_; }
   void IncrementEvalDepth() { eval_depth_++; }
   void DecrementEvalDepth() { eval_depth_--; }
@@ -109,14 +115,40 @@
     export_error_ = true;
   }
 
+  struct Loc_ctx {
+      Loc l;
+      int ctx;
+  };
+
+  void PushEvalStack(Loc loc, int ctx) {
+      Loc_ctx l{loc,ctx};
+      evalstack.push_back(l);
+  }
+  void PopEvalStack(void) {
+      evalstack.pop_back();
+  }
+
+  string caller_;
+  map<string,int> mapfn;
+  int mapidx;
+  map<int,string> mapctx;
+  int ctxidx;
+  int ctx; // save for func invocation
+
+  int registerCtxIdGet(void);
+  int registerCtx(string str);
+  int registerCtx_(string str,int idx);
+
  private:
+  vector<Loc_ctx> evalstack;
+
   Var* EvalRHS(Symbol lhs,
                Value* rhs,
                StringPiece orig_rhs,
                AssignOp op,
                bool is_override,
                bool *needs_assign);
-  void DoInclude(const string& fname);
+  void DoInclude(const string& fname, const IncludeStmt* stmt);
 
   Var* LookupVarGlobal(Symbol name);
 
--- kati.ori/expr.h	2020-08-30 20:25:21.581042913 +0200
+++ kati/expr.h	2020-08-29 13:29:35.013395190 +0200
@@ -30,6 +30,9 @@
   virtual void Eval(Evaluator* ev, string* s) const = 0;
   string Eval(Evaluator*) const;
 
+  virtual string substOneLevel(Evaluator*ev) const { (void)ev; return string("undef"); };
+  virtual bool isVarRef() const { return false; };
+
  protected:
   Evaluable();
   virtual ~Evaluable();
@@ -74,4 +77,6 @@
 
 string JoinValues(const vector<Value*>& vals, const char* sep);
 
+void init_product_var_list(void);
+
 #endif  // EXPR_H_
--- kati.ori/flags.h	2020-08-30 20:25:21.581042913 +0200
+++ kati/flags.h	2020-08-29 13:29:35.013395190 +0200
@@ -32,7 +32,6 @@
   bool enable_stat_logs;
   bool gen_all_targets;
   bool generate_ninja;
-  bool generate_empty_ninja;
   bool is_dry_run;
   bool is_silent_mode;
   bool is_syntax_check_only;
--- kati.ori/func.h	2020-08-30 20:25:21.581042913 +0200
+++ kati/func.h	2020-08-29 13:29:35.013395190 +0200
@@ -20,6 +20,7 @@
 #include <vector>
 
 #include "expr.h"
+#include "loc.h"
 
 using namespace std;
 
--- kati.ori/loc.h	2020-08-30 20:25:21.581042913 +0200
+++ kati/loc.h	2020-08-29 13:29:35.013395190 +0200
@@ -16,6 +16,7 @@
 #define LOC_H_
 
 #include <string>
+#include <sstream>
 
 #include "stringprintf.h"
 
@@ -25,6 +26,13 @@
 
   const char* filename;
   int lineno;
+
+
+    string as_string() const {
+	stringstream m;
+	m << (filename?filename:"<undef>") << ":" << lineno;
+	return m.str();
+    }
 };
 
 #define LOCF(x) (x).filename, (x).lineno
--- kati.ori/log.h	2020-08-30 20:25:21.581042913 +0200
+++ kati/log.h	2020-08-29 13:29:35.013395190 +0200
@@ -35,10 +35,24 @@
 #ifdef NOLOG
 #define LOG(args...)
 #else
-#define LOG(args...)                                             \
-  do {                                                           \
-    fprintf(stderr, "*kati*: %s\n", StringPrintf(args).c_str()); \
-  } while (0)
+#define LOG(args...)							\
+    do {								\
+	fprintf(stderr, "*kati*: %s\n", StringPrintf(args).c_str());	\
+    } while (0)
+#endif
+
+#ifdef NOLOGL
+#define LOGL(args...)
+#else
+#define LOGL(args...)							\
+    do {								\
+	FILE *f;							\
+	f = fopen("/tmp/kati.log","a");					\
+	if (f) {							\
+	    fprintf(f, "*kati*: %s\n", StringPrintf(args).c_str());	\
+	}								\
+	fclose(f);							\
+    } while (0)
 #endif
 
 #define LOG_STAT(args...)                                          \
--- kati.ori/stmt.h	2020-08-30 20:25:21.585042978 +0200
+++ kati/stmt.h	2020-08-29 13:29:35.013395190 +0200
@@ -59,6 +59,7 @@
 
   virtual string DebugString() const = 0;
 
+
  protected:
   Stmt();
 
@@ -102,6 +103,7 @@
   virtual string DebugString() const;
 
   Symbol GetLhsSymbol(Evaluator* ev) const;
+  bool markDefine;
 
  private:
   mutable Symbol lhs_sym_cache_;
